pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- picomnist
-- by bigsexydaddy

scalew = 0.06287362800369398
scaleb = 0.050924302892707

function dequantize(qw, scale)
	return qw * scale
end

function exp(x)
	return 2.71828^x
end

function sigmoid(x)
	return x / (1 + abs(x))
end

-- Super simple dot product function
-- Only works if a is a matrix and b is a vector
function dot(a, b)
	local result = {}
	if #a[1] != #b then
		stop("Matrix and vector sizes do not match")
	end

	for i=1, #a do
		result[i] = 0
		for j=1, #b do
			result[i] += a[i][j] * b[j]
		end
	end
	return result
end

function softmax(x)
	local max = x[1]
	for i=2, #x do
		if x[i] > max then
			max = x[i]
		end
	end

	local exps = {}
	local sum = 0
	for i=1, #x do
		exps[i] = exp(x[i] - max)
		sum += exps[i]
	end

	local result = {}
	for i=1, #x do
		result[i] = exps[i] / sum
	end

	return result
end

-- Nearest neighbor interpolation
-- Doesn't actually mimic the way the MNIST dataset is created but it seems to work fine? Lmk if there's a better way that doesn't compromise performance
function interpolate(input)
	local out = {}
	for y=1,28 do
		out[y] = {}
		for x=1,28 do
			local src_x = flr(x*4)
			local src_y = flr(y*4)
			out[y][x] = input[src_y][src_x]
		end
	end
	return out
end

function init_weights()
	weights = {}
	local c = 0
	for i=1, #size-1 do
		weights[i] = {}
		for row=1, size[i+1] do
			weights[i][row] = {}
			for col=1, size[i] do
				local num = @c

				-- dequantize
				local real_num = (num << 4 & 0xf0) | (num >> 4 & 0x0f)
				real_num = (real_num < 128) and real_num or (real_num - 256)
				weights[i][row][col] = dequantize(real_num, scalew)
				c += 1
			end
		end
	end
end

function init_biases()
	biases = {}
	local c = 8120
	for i=1, #size-1 do
		biases[i] = {}
		for row=1, size[i+1] do
			local num = @c
			local real_num = (num << 4 & 0xf0) | (num >> 4 & 0x0f)
			real_num = (real_num < 128) and real_num or (real_num - 256)
			biases[i][row] = dequantize(real_num, scaleb)
			c += 1
		end
	end
end

-- a should be a vector of size 784
function feedforward(a)
	local sm = {}
	for i=1, #size-1 do
		local z = dot(weights[i], a)
		for j=1, #z do
			z[j] += biases[i][j]
		end
		if i == #size-1 then
			sm = softmax(z)
		end
		for j=1, #z do
			z[j] = sigmoid(z[j])
		end
		a = z
	end
	return {a, sm}
end

function _init()
	size = {784, 10, 14, 10}
	cols = {0,5,6,7}
	init_weights()
	init_biases()
	a = {}
	drawn = {}
	result = {}
	click = false
	btnpos = {0,0}
	poss = {}
	poke(0x5f2d, 1)
	guess = nil
	sm = {0,0,0,0,0,0,0,0,0,0}
	a = {0,0,0,0,0,0,0,0,0,0}
	cur_time = 0
	time_spent = 0
	g = {'g','u','e','s','s'}
	flat = {}
	printh("\n#### INIT ####\n")
end

function _update()
	btnpos[1] = stat(32)
	btnpos[2] = stat(33)

	if stat(34) == 1 then
		add(poss, {btnpos[1], btnpos[2]})
		click = true
	end

	if btnp(4) then
		poss = {}
	end

	if btnp(5) then
		printh("\nnew guess\n")
		local drawn = get_drawn()
		local interpolated = interpolate(drawn)
		for i=1, #interpolated do
			for j=1, #interpolated[i] do
				flat[(i-1)*28+j] = interpolated[i][j] / 7
			end
		end

		local result = feedforward(flat)
		a = result[1]
		sm = result[2]

		guess = get_idx_of_max(sm) - 1
	end
end

function _draw()
	cls()

	for i=1, #g do
		print(g[i],116,(i-1)*6,7)
	end

	-- colon
	pset(116,31,7)
	pset(118,31,7)

	print(guess or 0,116,34,7)

	for i=1, #sm/2 do
		local v = round_to_2(sm[i]*100)
		print(i-1,(i-1)*26,115,8)
		print(v.."%",(i-1)*26+5,115,7)
	end

	for i=#sm/2, #sm do
		local v = round_to_2(sm[i]*100)
		print(i-1,(i-6)*26,122,8)
		print(v.."%",(i-6)*26+5,122,7)
	end

	rect(0,0,112,112,1)
	clip(0,0,112,112)
	for p in all(poss) do
		circfill(p[1], p[2], 4, 7)
	end

	clip()
	pset(btnpos[1], btnpos[2], 2)
end

-- function print_image(x)
-- 	for i,v in ipairs(x) do
-- 		local index = flr(#cols*v)
-- 		local color = cols[index]
-- 		local x = (i % 28)*4
-- 		local y = flr(i / 28)*4
-- 		for j=x,x+3 do
-- 			for k=y,y+3 do
-- 				pset(j, k, color)
-- 			end
-- 		end
-- 	end
-- end

function get_idx_of_max(x)
	local max = 1
	for i,v in ipairs(x) do
		if v > x[max] then
			max = i
		end
	end
	return max
end

function get_drawn()
	local arr = {}
	for y=1, 28*4 do
		arr[y] = {}
		for x=1, 28*4 do
			arr[y][x] = pget(x,y)		
		end
	end
	return arr
end

function round_to_2(x)
	return flr(x*10)/10
end
__gfx__
ff00ffffff0100ff0001ff000101ff0000010000ff010000000100010000010001000000010100ff00000100ff0000ff000000ff01000000ff000100020001ff
fdf9f6f2f4f4f2e7e6ede9e7ebf4fc0000ff000100ff00fffffffefaf9ebf2ecf7f6e4ddf4f8d7dad8e4f2f4f8fd00ff01000100fffbfaf4f2fbf5f7f605f706
f9fafb05f6e6edeff5faff0000000000fcf8f3e9edf6f2e9f108fdfbf30903fffaf7f1f6eaf3fe0000010001fdfdf7f2e7f6fbefeef919f9fc0ef3f2e60b04fb
e0f5ff00fffffffff8feff07f107f8ff0a0402f2f3f60c0df309f50bf7fffdff000101feeff4090e0f08fc020f00fff9070116ff120f0e26100aff0001030202
f6ff0601fc00fef508f6070b27232a211b1c040f1e18fb0000010816130bf50c0a0b0d0cfb080c04172e2c23200f161e141705000102131f1ff80301ed0a130b
1e29f6c7e21f1116131a180afc060701ff010e1b0bfa02090bfe1304130ce6cae603ede9f0fd12eaedfd010001020a0df9050100080c0e0dfdeedac0eae4ecdf
01fb170af801000000ff0707f90b05fd0a0a03e605e4c5e7e2edd9010ef6001e0304fe00000001fcf3f5f205f90505f215c6c7f3e102fa05fdf9fa11010100ff
0000fff6f3f9f7fcfe0201f7d5b2e1ffe7f505050509f2fcfdf5fbfe01fffff3ea0813eeede305f5d9d5f207e81106ff07ff03f800f7fe0000ff00e9fb020d07
03e9f6f6efe4f6fcf30ceff8f70709fcfffafeff0000fdeb00fd0b071015050d03edf804f3f7fefff20801f7f9fbfdff0001fce7f90013ff07170a23070707f5
ee02f6f8fb11fff3f3fe00ff0000fbf0f30608fb0000fe11fbf4fef5f4f4fff8fdfff1ebfdfe0000fffffdfbf7f2fff3f407f2040d220600fef9fafee6f5f0f8
ff0000000001ff0002fe0104fb040a070fe80007010df6dad6f4f8f9fdff000101010000fffdfcf8f3f9fdecf7f209070205fbfbebf4f9fb000000ff00000001
00fbf3fcedf5f4fd01fe010cfbff020efbf7faf901000000ff000001fcf9f2f3fbf6e6ec0c07e0f1f9fb0213fafb01fcff000000000000000000010001010100
0002fafcfefcfc00010303ffff000000ff010100ff01000000000101000001ffff000000000100ff000000000000000000ff00ff010200010001fefcff0001ff
ff00ff0000ff00ff0000010100ffff01010000010002f9f4fe0104feffffff01010000010000010000000101040b14160d00f6f2f5fb1306f3effd0403010000
000000ffff000204090dff0703040df21701fbf3f8effdfdff060302010000000002070c1e170617110d0ff814250c110bfdf4fe0313000000fffffefe09141e
2c1cfc0b12170d161709f615090300021114fffd00000100030e18252a1e1f15f80ef60cfd091c05e90904061c15ffff00000000080c131a252c100ff8fe0e08
170104010514040b1a140201010001ff060e1212212b14070bfef8fb092408141a1603130f0f0100000000020405100d130bf10000f3efd9e90c141516ff1518
0f08030100ff0001ff0106010104fc020af6fadaf4fa07180c10180d080807ff0000fffcfcfe04f9f7fa0815f8f3dedffbfdfc18160a0a09070301fc00ff00fe
feff0606030b0005f2efd0f0f7e7001406040c0906030100000000fe000008060908020af3f9f0eae6fd04170b080804fffeff010001000000030b141107fff3
f4fbf8ffd9001615110607020100ffff00ff000001050a1820fef8e212f5f104f125170efffefe03050001ffff00000102080e110a08f4fef3dfeafb102c0eff
faf9f4ff0203ff00000001ff05122510ff160c07e8f1f80a1b15f706f800090b0b060000000000ff091f230a1408110103f40e000908fcf9f10a120c03010000
01ff000105130a160405060c06f7ee02f4f3f6f5fc08100afd000000010001fe02f6fa0d0006f7060c0feff90507f708060f10080100ffff000100fe00dfedfe
000c01122418091003f5edf2fb0a02ff000000ffffffff0101e9f40401ff0a13fb192906fcf8080309060100ff00fd0000000003fefcfef6090ff40d0a070b19
210502fefcfffffeff0100ff01ff0000ff0100faf7fc02f9fd04010800fef8f7f8fbfcff00010100000000fffffeff00fffbfafef7fcfbf7fbfcf9fafcff0000
00000000000001ff000100ffff00fdfffefffe00ffffffff00ff0101000000000100ff0100000000ffffffff00000000ff000000ffff01000000000100ff0000
00ffff00fefdff00fafe00fffefcfefffdfd00000100000000000000ff00fdf8f5f7f6f7f1fc06faf7f9f5f5fbfefeff0100000000ff00ff0006fffef9fc040c
181d1f150cfbfcfc0706f7f8fe00010000010101020a0d1322221d20211c0c1806fc02fe0efbe9e2fa000101ff0000040d17231a060b12fef611080f10f6f4fe
eeece8dff600000100ff010a1c28201219100e190a160ffb19f413e40201fce5f0fcffff0001020e2b1d1e0cfb0209030b111d0608fcfefc0cf2f5e7d8faff00
0000010f351e1a150e0a14fc1cfe0e1a12fe00effdf404dbcff5ff000100010b2511fb0df9ebf2bfdfec2b451e1a040a09fb05ded7f7ff000001020707f0decf
a685abcecad8f40b1f1b18240efd06e1e1fdff0000ff0105fcd3ac9393d3e9fff0e7ee1c0c13090d1900f8f2ed0500ff01000001f6ccadbbfb1504ff09fcfef6
03ecf0050cedebf4fb050000000000fdf7d0cdf8180cfc03eae310ed0706060207f8f0f7f8060401010000ff04f3f91102e7f0f3faea10f7fc06061407f803f9
fa0c0b000000000714161b0afcfbf802f9f1f911f404030c02f40809021712010100010d1b1f13fbecf6e4f1f2fceae40f0b20fd030c080b1b1d0d0600010212
20fcfaedfce1d3dee5f3f7fa0b040e0ef80f0a060e1505010001031a15f7f301f9f4ebedfd041a1220fe0a15fc320200030b01000000031b110e0707fef4f8f6
f4e9f3fc0212141a060d07fdf60400000000021722fe0f01f8080af8eaf9040001070f0e0f0002f5ff0400010000020b110009faf2f3feeff30cedf7f7ee1311
0f0203f90204000001fe03060302000c05fe0502fbf5fdfa0404f00f0906030103010001000000020b050414f81d0bfaeb01f6ffe9dcfe04f0f3f80003010000
0100ff020d140c08fcf71007fa051ef6f8fcecdce8f3f9fb0000010100ff0101080a0c0b04060c06070a0003fdfbf6fbf8f7fbff00ff00000000000100ff0101
0202010001fefe01030100ff02ff010000ff0100000000000001ffff000001010101010001ff0000ff00ff000000010001000100ff00ff0000ff010100010000
000101010101000001ff000000010001ff01fffefefefefefdfefefdfcfd00ffff00ffff01010000000101000100fefcfbfffbfaf8f7efe9eef6fbfcfefefe00
01000000000001ffff00fefe00090906fbf7f5e8ebf4fdf8f5f8f8f9fc0000000100ff0100000202010c110207050ef90af9ff01f0ebeaf1fb00010000ff0000
02020401fd04f113070102edf601ff04fbfdf8eeedfc00ff0000010008fe01fb0705fb02070bf906fe0ef8fa0402fcf1e8f4fd0000ff0104140205fbf9f6fafd
f609ff000cf2f400f5f1f6efebfbfb00ff0000051b13110c0d090306ee0804fdeaf1f807f4fff6e4f509fe00ff000102171b11110205fffbf7f2ebfe19190e08
110f0903050dffff0000ff031214140707070afdf2e8f6132d37404d36372c160704fd00ff00fe0401030c0200fffd06fe031f0002080f131c26271e12070101
0000ff04f9f4effbebf4e2e4ff091a0c0807010a0024120809070300ff000000f3e4e2fe01fff4050114061b100907091811f8ebf7090201000000fefae8e3f3
00f3fc0e181c05030f16fefbfff8e2e5ed070500ff000002fef502fd01f5f40f09140d100a01f101eef6ebedf3ff02ff00000001fbfe1400ff0d021121070712
140ffafff3f6faf5fafdffffff0001ff06f5fb06fd0f0e10211b0c110c01fcebf9fbf6eff8fe010001ff00fc06fef5020702060d1b25040bfaf6f2f0fff2f9f8
02030100000000fcfffbf004ff0a0908fa12f2edfef70000fffe0300fb050200ff0000030af3fa050009fefcfbf3f0f9e8f3f803fa110902fd05020101000206
06020bfde701faf3fcf7f30001fff3f9fffd0200fbff0101000001050502110d0af80700f0ebfbf5fcf3f7fcfdeffefbfd000001fffffffffdf70614160bf2f3
0413fb0503ff15fb010705fffbfe00ffff00fffe00fdfcf6eae1eefafe00f3fcfffffa0102fefbfdfaff0100ff0000ff00fefefefffe01fbf0fc010102f6eded
f5f4f6f9fa00ff0101000000ffff0000fffdfffff9f8f9f3f5fcfcf9fbfeff0000000000000000010000ff00ff000000ff00feffff0101ff0000010101ff0000
0000ff00ff0100ff01010001ff0000000001000001ff00ff0000000001000000ff00000101ff00000101fffdff010000000000ff0000000000010000ff00ff00
04040b101b1e1406050a00fef80607fe0000ff0100ffff000101ff020609141603070c090c0bfc0700fcfffe040100ffff00fefffffdf6f7f80404f9e9fa0def
f602e7fd00f9fbf9f0f8ff0100000000fff9f1ec0bff1b08fd110806fcfefb04f302e8faf3efff0000000001f9f9fcfff502fcf4fcfe09f006fb010af8f9f8f5
d6dcf4fe000104fff7f7eefbf5fbf802f80711fe0500f7f3f2ecfcf5d8d9f900000102fef9f7e9fd00020200f9011a040a05f9f40102f0f2cbcff800000001fc
fc02f7ffecf1fc0a0a021308eef7040909e4eef6cfd1f30200ff01f8f3fafb04ebf2f4ecf2f702fff4fdfcfef7faf5fee6e2f801000000f8f703fcf8f6f8f1fd
e2ecd8d6fbe4e2ecf502fdfef1e6f300000100fbfe03fce4e8eee7e9fd05d4e4fe0efc09011d122c2001f700000000fafbfb09fde0f1fff4e0e3fdefefeffffd
021623351d040100000001fbff272f1f0a02f80ae7ede5efffe3eff60d04091a01000401ff00fffb07363e432809fdeff0f5edeffa0b0f050afcf201f8040301
00ff01fb1218213f3a261b05f7e3eef4f8f9090304fa01fc010e0802ff0006f8fafcfc1f3854453a1b0f08fff70202ed12ecfd00181a03ffff0105f7fbfdef00
03172e394718f81119040a0cf6f50c17271401ffff0004f4fa00f5f3f3fe090f1a0a0b1400010f0a0c0104101d0900ff000004fcf51df308f7faf30e020b070a
1af708031809fc1112050100000002fef20801f8f90bfe030b0202fc1b110f201609131c14090000000000fffbf5fbfe0c0cf704150bfbf309f9fe0216101516
0b060100ff00fff6f0f80a060700fc0b06f3fcecf9fb070f000e190e070200ff000001f2f0e7e8f40001f0fc0b110ffeebebf0f9fa050801020100000100fefd
fefbf4f5ede3e6e9e9e6dfdbe0e5eef0f9fcfeffffff01000100000000ffff00fffcfbfcfdf6f5f6f9fafdfbfefe0001ffff00ff00000100010101010000ffff
0100fdfeff00000000ff00010000ffff01ff01ff000000ff0101ff0001010100ff000001000100ff0100ffffff00feff0000ff0000000201000001feff00ff00
0000000000010000ff0000000001ff01000305070301fffeff01000200010100ff0000010000ffff00ff01030404070f0f10110f0906060906070201000000ff
00ff000000fe00050d1011130a0f0b0c0c08ffff04fdfafe01010100ff0000fffdf9fd0a1114fe07f7ff03020304030e0f0901050906060000ff00fcf5f5f1ed
eaf5f805fb06120bf7f908f702080807080301000000fdf6f8faf4f80303fe07fefc0713f306fcfbfbfbfef8070d03000200fbfaeff3f8ebf0fbe6f0000505f5
06f8fe05ec0af8f90f13070001fffaf3f0e5ece507f60200f5f4e40204e6040204fe0d0c100b04000100fbfb00ec01fa07fbf4f705f1d4ebf3f108f3fcfb0605
0f090100ffff02fdfa0304f811f408fe211f01fdfff7f6fcfafffd051106fd000100fbf9f0f601f9ee0308fe212817ff04f9f80d0114ff0613ffff000000fcff
f80009fbff0d03193d1b0c0c0e0811190d09fcf90f03ff000001ff03010604fe08181a2b310dff050301f4ebffffeeec000200000001010401120b12312e2615
0f0707f902f4fff0f0fbf4f1fe0701000101020405100a071a0a0d1809e9060500f901f6effaf4ef010801000000010408091a101a010ff9fdfefcf8f5ff0001
fcfef5fafa020300010000060a0a1615240b0efb00f7ff0406fafa05021617120a06020001ffff03060e140d07faf6e4faf6070710080f0b0723231f13060600
000000030c191a0a0304f0f1dbef0f081420291a241c201e12050300000100060e150a0601040c04f8f807021218151f21131a0e08010100ffff040c0b01fef0
f6000714fbedf4eb02f9041418171612040000000000050e03fdfbf10009ff0809fef5e5f6f0f5010b17140f01010100ffff0407f9f5fc020814070d07050303
04f5fbfc0307080500010000ff0002fff70209fff9ff0df2fc0dfc08fa09fe03050404020000000000000001060202020002fbf80bfbf203f90707fff9ff0105
00000000ff000100ff010100fffff801fef5ff0202ff01fdf9fb01ff00ff00ff020000feff01010000000000fffe0001ff0000010000000100000000000001ff
00000000ff00fefefefd00ff00010100ff00ff00ff0001000000000101010000fffefcfaf8fafcfdfcfdfd000000ff0001010101010000ff000000fcfcfcf9f7
f6f8fcfcfefbf8f501060702ffffff00000101000000fffcf8f2f1eef5f8ebe4f0f7eefb0a07fd02fdfafeff0000000003ff03fafff8f904f803ec01e9e7e7ef
f7edfc06fdfc0100000001030407080d08f7ed0f0af2fd000906ffebf3feebf4fdff020000fd01090afafd0bfef5fff50aff06eeff0afdff0200f2eae8fa0100
0001000107fbf7f6090c0cfdfbf0ff03f20a09f5fff8ebf8ecf1f4000001000600feeffffd0a0ef8100efdfc0509fa06f9f6fcf4e7e4efff00000104fafcfb01
fd0609fe0e0cfa0405100a10fdeefde8d1e3f1ff00ffff05ff090616041419180ce9e7170f0f0e0e20fffee0dbf0fd00000000000b0507180d030b10f9e7d316
141318141a090debe6f6fc01000000ff130d0d06fffe0ffff2e005180f25020e0d1904eff6f6fbfffeff00030c09020b0e0a0105f2e7010608070d23200e15fd
f9fffe0000ffff050e0d040805fd0d09e5f7f9112b2c161b191310f8f4fbfdff0000fefc0d13080f0de7090fe2eaf92a08110a071812f8ebedf5faff0000fef9
07fcff170dfefafaf4fa0d1309061ddef005edf2f4f6fcff010100f5f8fce9f1f2ecff10fdfaff0af902f2f2eb03e0e4f2fcff0000fe0201fcfdece0e0dbf100
e9f000f4eff8e6ffdeedd9dbf5fe000101ff00f9fdf2e5ecf8ecf2e7edfe00eefcf2f2ffe0f1dde2fe04000100fffeeff0e8e6f4fcfbf3e8e3f8edf0fceff3ed
e9f2e2ef00020000ff00fcf4f5eeecf904faf8fceaf1f3f3f8f1f3e1e5f1eeeffeff01000001fbf7fdfdf6fc00eff6f8e9edf9ddefe3f6f7ebf9fbf6fe00feff
0001fffd040b08f702fef5edf3ecdfeae6fceffd161603fdfe01ffff00ff000605090bfafcedeeee06f102fef9ef00041405fdfcfe0100ffff00010101030602
0812150101080a07000b0b0d03fbfd0101ffff000001000001000001000000ffff0000010000030100ff030000000100010000000100010000ff000000000000
00010000000000ff0000000001ff00ff000001000000010000ff010200010000ff01000200000100000000000100ff01fffffefcff0201fefafcfdfe00fe0000
ff01000100ff01000100feff02fefbeef6ebe6e8f4f3f5f604080c05010101ff0000030201000105070b150d02031109eed9f0e4e7ee01000302010000ff0101
00fdff0601061610112c100b00f7ff0307fff7f4f8fc01ff0001ff01fcf3f3f8050b171f1f263b2925282d0e1217e9def4010100ff000001f8f3fafe06131b1e
34212b1a2b2e1813221cefe9eef7ff0101000002faffff0010f9110f1019343d350e1c19040015f4f4f902ff000001060300130dfb0f260e2327223311150100
0703050a0600030100010005fdfc160a0afb0a1203212ff0f7ecfbf2f9fa002511050403000000fdfe120b040af0f1f4f21a0ff9000e21041c001b29230d0901
01fffef50d1a05f00100e6cbc4db1107021f1126180c0e1208030300ff0000fd0705ecefe9d8dac2c9142df002f9fb0e0c0dfdeff2faff01ff0000f7f0f0efe4
e3d4fcd1d9070ffa01f80bf2edebebf3edf801000100fae8eeeef5e7f7e803e9dff4e80edefc0bff0af2e8f2eff8ffffff0000fb01e9f4ebf9f9fcf2faf5e2da
f6f0f7f7ebdfe4f3eff5ff000001fc01fbf9f3fbfafc07fa05ebe5dcf3f8db0ae8ecfaeffcfaff010100fcfff9fdf5eeeef80606ddffe1e9e5f8fffafaf705fc
0008ffff000002fef70109fcf60303f505f9f6f3f1f0f8edfc04120b010601ff010001060b1b23150b04fdeaf308020df311f00b111920130f06fe0001000203
09222c1a14fcfcf0e6e0f7040b0501071f1d13090d03ffffffff0101031017162a0f030912ee150000fe00fdfc05060504fe0001ff000001030a091423163211
171c151509130403f5040d0e0afffe010000ff010301fd091911180a0e1bfd0507000516191c0a0605feff000001ffff01020a13211e1a1d3a291a1e282a3e2d
25150f080400ffff0000ff0002030d0d0d1c1c1b2e284d3619192623160c0a0300ff0100ff00010000ff0001000103010a070e0302040b100301020000ff0000
0000000000000000ff010000feffffff01020100ff00000000ff0000ff0000ffff00f9f3f7fff9f5f2fafffd0000fcfafdfefdff00000001000100000000fcf0
f1f6ebeee9eeeff9f9f6f4f7fafafbfd000000000000fffe0000f9ebe9e5dbebe3c8d9efe5eb0c09eff6fe01000100ff00ff00010301f4efede4d7e7ecece7ec
eae80112fb08000109040001010000000908fdfd00ffec02f1ebf8eff1ebfaf8f9f80c091009fe010101010106090802fc0807fd00fff80cf2fcf40af600090f
1010060200ff0201fefb0406f90513f90c0d00fd0f0f020800051915171b0703fe00030001010308060f0302f800f90103030d0806111011170d0906000002ff
0ff307f2fe0c0119161efdfd04fe0107140cfd07070805020100ff000df301f5f304f606f4faf505030d0110120df3f6ff06000100fffe020f0002f101fffeff
00f8f7100c13fdf1f6f8fcf3e2fc020000fffe04110c05040606ed02f8f4fb1d0603ffebe3f001eee3f6010101ffff061e130b1009000b0d11fe0505fa0afaed
06f5fbe2e7f1fcfe00000104180f141d0ffbfd040a07fd090c1afb1407fbfce6e7f0fd0100010002060919fe1e091a0a07f8e803fcff0b08f4f202f6deecfd00
0000fffbfcf505fb120ef5f816fcf6fe04110cf8040cf8f6e2e9fafe0101fef9f8fe0901130bf8fffd0a0317080007f3f9fbfcf0edf70000010000f7fafd0104
0af9fefefc13fdfffbf7ff050bf3f7e5dff1ff00000100faede7fcf2e4eeebf6ececf3fcf1f40003fbfbece6e8f8ffff0000fffde8ded9ccc5d3e3d2e3f0e7f0
02f2ecfdf3f4f2edf6fbfe0000ff0000f8e9d0dbdbe4e7f1f8f702fd06fbfb0d0502f5f903fefe010101ff00fef6e2f80d0e00000ded03e8f8fc0403fc030107
0e0300000001fffd030d02ff0d0109fef4f20ff4fcf6f7f9fffbfd050802ff010100fffd10211e0c0cf20108f102f0e3eef7ecfb0f0f0709000000000100ff01
1019191c201b0d1513fd041208060504050907050100ffff0100010101050604070d06050c0f100d05020302060402ff0000ff01010100010001010000010101
0101010101000000ff0000000000ff010100ff010000ff00000000000100000100ff000001ff000000ff00ff0000ff000100ffff000203020201010203020101
010201fe0000ffff010100010100010002010a0c090b0802fe080e1008060602f9faff0000000001ff00010201f9fafa02ff0508f50505fa0a0f0c0dfffc0000
00ffff0000000205fff9f9070101faf7f30afefcfe0a0f1107020301000000fffffefd02fb03fe08fcf905feff09f508fbfffd120b0d0603ff000000fbfff706
08fcf8fbfa0401f8f606fb03010808100d0402ff00fffefffc0e080300fbffff00fbff0303fd06fa03f8f614180a01ff0000ff01fbfc0bfbfdfdfef9fe07f705
0001f7fc000af80e270f020000000201f2ddeefff803f2f0f501fef6f3fc01070205f50f210e040200000105fff8ebe7e3f1e5fe0b090df0fff3f4fa0309fe16
1000030000ff060607fefbf9faff1525122c3104040500fdfffd020802f7020000020608111919313d4d634b3728060a0c070200fd09100af8eef9fd00040412
28374f56684113f2f3f6000005030b050e081001f3e6ebf401030414273d391e11f3f0f9fcfc0c05fb08f20008fc01fdfcf3e7fd0001040a1004fa00f3f0fdfa
04f803f40507090005f60e1101f1edfe00ff0202fffff9ff05f3f70500fdfb0201f400fb05f8fcf1ece7e5fa0000010603fbfafb1104fa05fd02fbf7fc07fffc
01f8f9f9efecf5ff0000020900ef07f30604fffef2fdf1010bfe02080ef80204e7ecf8fc00000401040ffbf21000010606f80205f2ee01f8f6ecf0f0e5e1f4fd
000003f8e700eef8fdedfef6feff00fffe0403f30c0df6e5e8f1fe01ff0001fbf9010501fcffff0102020800f405f2030af9f1e8ecf4ff000100fffef3ee04ed
f3f9fc010a0bf20905fef0eaeff40201fafc0000ff00010701eef2030ef71109f7100aff0306fefcfff7fd07fdfd01010101010403fafaf4fc01fdfa030bfa02
0af4051010fffe02fcfb000000000100fe000403f8f8fffcfc0b09f705171c1314150e09030001ff0000ffff000203000000fefc010a02fe0505040509060100
0000000001ff0000ff01000000000100000000010000ff00020200ff000100001aa706c7f3d53d6c2cfeccec00136127fa9ee4c390e21338e5030ef0ff101c09
07f6edab31c741e3f90beb05c03ba2062b01e202f051f5c61747f4d5210ea4f10a1a9ff7e03ce29ae8d8eaf4d607e0fceafc21bcc133daf7eae60d02b4f9dc07
1bd31163e5eae40609eb00fe9dd03c0f22dc0c2308fc1cda5c0a2bfaeac1ef0cf0b52ce3ecf053141fe99616f1b2c0e3e4e510edcdd4d70e24631bc7fbf7f913
057f1ab92be2f3e8d04ff1e3d019d8b3d9992801fed7cac215e228fdd7b938a9ce11f8dbc10c1d20e5cad710ed3bc1e8abace7c791eb3dba33eefc120e21e1a1
c125dae2e8ce0803091748d5b14528ccf734cdf7d2b3c0fee3f05abaa5d81ad3272e33b8ca0b16d3deb63adcfcaff327c3e2d913e70eacf6051bae97ec03f5bd
26ec03f00218bef3d5632cd263047f99c59bf1f1f3d0d1a0aad30000000000000000000000000000000000000000000000000000000000000000000000000000
